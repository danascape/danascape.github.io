<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Saalim Quadri</title>
    <link>https://danascape.github.io/posts/</link>
    <description>Recent content in Posts on Saalim Quadri</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Fri, 08 Aug 2025 00:00:00 +0530</lastBuildDate>
    <atom:link href="https://danascape.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GSoC 2025 - Automotive Grade Linux (AGL) &#43; ROS Integration</title>
      <link>https://danascape.github.io/posts/gsoc-1/</link>
      <pubDate>Fri, 08 Aug 2025 00:00:00 +0530</pubDate>
      <guid>https://danascape.github.io/posts/gsoc-1/</guid>
      <description>&lt;h2 id=&#34;project-background&#34;&gt;Project Background&lt;/h2&gt;
&lt;p&gt;This summer, I&amp;rsquo;m working on Google Summer of Code 2025 with the Linux Foundation, focusing on integrating Robot Operating System (ROS) with Automotive Grade Linux (AGL) through the meta-ros layer.&lt;/p&gt;
&lt;h2 id=&#34;what-is-automotive-grade-linux-agl&#34;&gt;What is Automotive Grade Linux (AGL)?&lt;/h2&gt;
&lt;p&gt;Automotive Grade Linux is an open-source collaborative project that brings together automakers, suppliers, and technology companies to develop a unified software platform for connected cars. Think of it as Android for cars, but built from the ground up for automotive requirements.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Features and Future Scope in AOSP - Part 2</title>
      <link>https://danascape.github.io/posts/8/</link>
      <pubDate>Tue, 22 Jul 2025 00:00:00 +0530</pubDate>
      <guid>https://danascape.github.io/posts/8/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Something that started as a hobby of mine, to something that I do professionally in my daily life.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;core-features&#34;&gt;Core Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Modular Architecture&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic partitions for seamless A/B updates (and easy rollback) across devices.&lt;/li&gt;
&lt;li&gt;Many System Components packaged as APEX modules.&lt;/li&gt;
&lt;li&gt;Mainline Modules allow Google to update system components via Play Store.&lt;/li&gt;
&lt;li&gt;GKI (Generic Kernel Image) standardizes kernel builds across various devices.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flexibility&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modify or change SystemUI, Quick Settings, lockscreen, and much more.&lt;/li&gt;
&lt;li&gt;Runtime Resource Overlay framework for live theming and UI-tweaks all without rebuilding or reflashing.&lt;/li&gt;
&lt;li&gt;Add or remove default apps, permissions, or behavior.&lt;/li&gt;
&lt;li&gt;Extend frameworks/base to add your own services or APIs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Device Portability&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started with AOSP - Part 1</title>
      <link>https://danascape.github.io/posts/7/</link>
      <pubDate>Tue, 22 Jul 2025 00:00:00 +0530</pubDate>
      <guid>https://danascape.github.io/posts/7/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://danascape.github.io/posts/7/img/android.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Today marks six years since I compiled my very first Android source build — it was Android 7.0 Nougat. Ever since then, I’ve been deeply involved in Android platform development, and there’s one question that keeps coming back to me, asked by thousands of people:&lt;/p&gt;
&lt;h3 id=&#34;what-does-it-actually-take-to-get-started-with-aosp&#34;&gt;“What does it actually take to get started with AOSP?”&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re new to the Android Open Source Project, the sheer scale of it can feel overwhelming. I still get the occasional nightmare navigating through &lt;code&gt;frameworks/base&lt;/code&gt;, HAL layers, and random blueprint files scattered across the tree.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using AOSP Kernel Build</title>
      <link>https://danascape.github.io/posts/6/</link>
      <pubDate>Wed, 14 Aug 2024 00:00:00 +0530</pubDate>
      <guid>https://danascape.github.io/posts/6/</guid>
      <description>&lt;p&gt;In my previous blog, we talked about how to cross-compile Android Kernel, but there is another official way that ODMs use to compile their kernel sources, via AOSP Kernel Build.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://danascape.github.io/posts/6/img/akb_intro.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;This blog covers 2 aspects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compile using Legacy AOSP Kernel Build&lt;/li&gt;
&lt;li&gt;Add support for bazel Kernel Build&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Bazel&lt;/strong&gt; is an open-source build and test tool from Google. It supports a wide range of programming languages and platforms, and it&amp;rsquo;s known for its speed and ability to handle large codebases efficiently. Bazel uses a build system that allows for incremental builds, parallel execution, and sophisticated dependency analysis, making it a popular choice for complex projects like AOSP.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cross-Compiling Android Linux Kernel</title>
      <link>https://danascape.github.io/posts/5/</link>
      <pubDate>Wed, 24 Jul 2024 00:00:00 +0530</pubDate>
      <guid>https://danascape.github.io/posts/5/</guid>
      <description>&lt;p&gt;When you use your Android device, you&amp;rsquo;re interacting with a complex system that relies heavily on the Linux kernel at its core. But what exactly is the Android Linux kernel, and how does it work?&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://danascape.github.io/posts/5/img/cc_lk_intro.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-is-linux-kernel&#34;&gt;What is Linux Kernel?&lt;/h2&gt;
&lt;p&gt;The Linux kernel is the core component of the Linux operating system, responsible for managing hardware resources (such as the CPU, memory, and devices), providing essential services to software applications, and ensuring secure and efficient operation of the entire system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LFX Mentorship for Linux Kernel Bug Fixing</title>
      <link>https://danascape.github.io/posts/4/</link>
      <pubDate>Thu, 27 Jul 2023 00:00:00 +0530</pubDate>
      <guid>https://danascape.github.io/posts/4/</guid>
      <description>&lt;p&gt;Learn more about the Linux Foundation Mentorship programme, and hear from someone who went through the process.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://danascape.github.io/posts/4/img/lfx_logo.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-is-lfx-mentorship&#34;&gt;What is LFX mentorship?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;The Linux Foundation Mentorship Program is designed to help developers — many of whom are first-time open source contributors — with necessary skills and resources to learn, experiment, and contribute effectively to open source communities. By participating in a mentorship program, mentees have the opportunity to learn from experienced open source contributors as a segue to get internship and job opportunities upon graduation.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to AOSP</title>
      <link>https://danascape.github.io/posts/3/</link>
      <pubDate>Sun, 06 Nov 2022 00:00:00 +0530</pubDate>
      <guid>https://danascape.github.io/posts/3/</guid>
      <description>&lt;p&gt;The Android Open Source Project is an open source development project managed by Google, and anyone is welcome to evaluate and add code and fixes to the source code.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Photo by Marek Piwnicki / Unsplash&#34; loading=&#34;lazy&#34; src=&#34;https://danascape.github.io/posts/3/img/intro_title.jpeg&#34; title=&#34;Photo by Marek Piwnicki / Unsplash&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;android-system-architecture&#34;&gt;Android System Architecture&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s first talk about the layers of an Android device&amp;rsquo;s architecture before delving into the build system and the source code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Application Layer&lt;/strong&gt;:
This layer includes built-in/system applications for direct end-user interaction.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android Device Tree Bringup</title>
      <link>https://danascape.github.io/posts/2/</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0530</pubDate>
      <guid>https://danascape.github.io/posts/2/</guid>
      <description>&lt;p&gt;Learn how to bring-up a device tree for your device so you can get started with building your favourite custom ROM!&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://danascape.github.io/posts/2/img/devicetree_bringup_title.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;Some of you guys might be wondering how people create your favorite custom ROMs like LineageOS, PixelExperience, HavocOS, and so on. I&amp;rsquo;m here to guide you about the basics of a device tree and how to do a scratch bring-up of your own.&lt;/p&gt;
&lt;p&gt;This article is a follow-up to my earlier article, &lt;a href=&#34;https://blog.realogs.in/getting-started-with-aosp/&#34;&gt;Introduction to AOSP&lt;/a&gt; in which we discussed the fundamentals of and how to join the Android Open Source Project.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writing an Overlayed DTS</title>
      <link>https://danascape.github.io/posts/1/</link>
      <pubDate>Tue, 21 Sep 2021 00:00:00 +0530</pubDate>
      <guid>https://danascape.github.io/posts/1/</guid>
      <description>&lt;p&gt;Overlayed device trees are written in order to avoid changing the base device tree structures already present in the kernel source, and just get them overridden during compilation. Learn how to create them!&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://danascape.github.io/posts/1/img/overlayed_title.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;
&lt;p&gt;A device tree is a data structure for describing hardware.&lt;/p&gt;
&lt;p&gt;Overlayed device trees are written in order to avoid changing the base device tree structures already present in the kernel source, and just get them overridden during compilation.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
